// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WORDDATA_BN2022W_WORDDATA_H_
#define FLATBUFFERS_GENERATED_WORDDATA_BN2022W_WORDDATA_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 22 &&
              FLATBUFFERS_VERSION_MINOR == 12 &&
              FLATBUFFERS_VERSION_REVISION == 6,
             "Non-compatible flatbuffers version included");

namespace Bn2022w {
namespace WordData {

struct Word;
struct WordBuilder;

struct WordList;
struct WordListBuilder;

struct Word FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef WordBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_JA = 6,
    VT_EN = 8,
    VT_KO = 10,
    VT_ZH = 12
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  const flatbuffers::String *ja() const {
    return GetPointer<const flatbuffers::String *>(VT_JA);
  }
  const flatbuffers::String *en() const {
    return GetPointer<const flatbuffers::String *>(VT_EN);
  }
  const flatbuffers::String *ko() const {
    return GetPointer<const flatbuffers::String *>(VT_KO);
  }
  const flatbuffers::String *zh() const {
    return GetPointer<const flatbuffers::String *>(VT_ZH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_JA) &&
           verifier.VerifyString(ja()) &&
           VerifyOffset(verifier, VT_EN) &&
           verifier.VerifyString(en()) &&
           VerifyOffset(verifier, VT_KO) &&
           verifier.VerifyString(ko()) &&
           VerifyOffset(verifier, VT_ZH) &&
           verifier.VerifyString(zh()) &&
           verifier.EndTable();
  }
};

struct WordBuilder {
  typedef Word Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(Word::VT_ID, id);
  }
  void add_ja(flatbuffers::Offset<flatbuffers::String> ja) {
    fbb_.AddOffset(Word::VT_JA, ja);
  }
  void add_en(flatbuffers::Offset<flatbuffers::String> en) {
    fbb_.AddOffset(Word::VT_EN, en);
  }
  void add_ko(flatbuffers::Offset<flatbuffers::String> ko) {
    fbb_.AddOffset(Word::VT_KO, ko);
  }
  void add_zh(flatbuffers::Offset<flatbuffers::String> zh) {
    fbb_.AddOffset(Word::VT_ZH, zh);
  }
  explicit WordBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Word> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Word>(end);
    return o;
  }
};

inline flatbuffers::Offset<Word> CreateWord(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::String> ja = 0,
    flatbuffers::Offset<flatbuffers::String> en = 0,
    flatbuffers::Offset<flatbuffers::String> ko = 0,
    flatbuffers::Offset<flatbuffers::String> zh = 0) {
  WordBuilder builder_(_fbb);
  builder_.add_zh(zh);
  builder_.add_ko(ko);
  builder_.add_en(en);
  builder_.add_ja(ja);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<Word> CreateWordDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *ja = nullptr,
    const char *en = nullptr,
    const char *ko = nullptr,
    const char *zh = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto ja__ = ja ? _fbb.CreateString(ja) : 0;
  auto en__ = en ? _fbb.CreateString(en) : 0;
  auto ko__ = ko ? _fbb.CreateString(ko) : 0;
  auto zh__ = zh ? _fbb.CreateString(zh) : 0;
  return Bn2022w::WordData::CreateWord(
      _fbb,
      id__,
      ja__,
      en__,
      ko__,
      zh__);
}

struct WordList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef WordListBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WORD_LIST = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Bn2022w::WordData::Word>> *word_list() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Bn2022w::WordData::Word>> *>(VT_WORD_LIST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_WORD_LIST) &&
           verifier.VerifyVector(word_list()) &&
           verifier.VerifyVectorOfTables(word_list()) &&
           verifier.EndTable();
  }
};

struct WordListBuilder {
  typedef WordList Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_word_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Bn2022w::WordData::Word>>> word_list) {
    fbb_.AddOffset(WordList::VT_WORD_LIST, word_list);
  }
  explicit WordListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<WordList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<WordList>(end);
    return o;
  }
};

inline flatbuffers::Offset<WordList> CreateWordList(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Bn2022w::WordData::Word>>> word_list = 0) {
  WordListBuilder builder_(_fbb);
  builder_.add_word_list(word_list);
  return builder_.Finish();
}

inline flatbuffers::Offset<WordList> CreateWordListDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<Bn2022w::WordData::Word>> *word_list = nullptr) {
  auto word_list__ = word_list ? _fbb.CreateVector<flatbuffers::Offset<Bn2022w::WordData::Word>>(*word_list) : 0;
  return Bn2022w::WordData::CreateWordList(
      _fbb,
      word_list__);
}

inline const Bn2022w::WordData::WordList *GetWordList(const void *buf) {
  return flatbuffers::GetRoot<Bn2022w::WordData::WordList>(buf);
}

inline const Bn2022w::WordData::WordList *GetSizePrefixedWordList(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<Bn2022w::WordData::WordList>(buf);
}

inline bool VerifyWordListBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Bn2022w::WordData::WordList>(nullptr);
}

inline bool VerifySizePrefixedWordListBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Bn2022w::WordData::WordList>(nullptr);
}

inline void FinishWordListBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Bn2022w::WordData::WordList> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedWordListBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Bn2022w::WordData::WordList> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace WordData
}  // namespace Bn2022w

#endif  // FLATBUFFERS_GENERATED_WORDDATA_BN2022W_WORDDATA_H_
